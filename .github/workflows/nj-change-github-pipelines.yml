name: GitHub Change Deployment

on:
  workflow_dispatch:
    

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install package-lock
      run: npm install --save moment
      
    - name: Install npm
      run: npm ci

    - name: Compile
      run: npm run build --if-present


  registerArtifact:
    name: 'Register Artifact'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: ServiceNow DevOps Register Artifact
    # You may pin to the exact commit or the version.          
      uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
      with:
          # Devops Integration Token
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          # ServiceNow Instance URL
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          # Orchestration Tool Id
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          # Display Name of the Job
          job-name: 'Register Artifact'
          # Github Context
          context-github: ${{ toJSON(github) }}
          # List of Artifacts to be registered
          artifacts: '[
             { 
                "name": "app-devops-cicd.jar",
                "version": "1.${{ github.run_number }}",
                "semanticVersion": "1.${{ github.run_number }}.0",
                "repositoryName": "${{ github.repository }}"
              }
          ]'

  registerPackage:
      name: 'Register Package'
      needs: registerArtifact
      runs-on: ubuntu-latest
      steps:
      - name: ServiceNow DevOps Register Package
    # You may pin to the exact commit or the version.           
        uses: ServiceNow/servicenow-devops-register-package@v3.1.0
        with:
          # Devops Integration Token
            devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          # ServiceNow Instance URL
            instance-url: ${{ secrets.SN_INSTANCE_URL }}
          # Orchestration Tool Id of the tool created in ServiceNow
            tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          # Github Context
            context-github: ${{ toJSON(github) }}
          # List of Artifacts in JSON format
            artifacts: '[
              {
                  "name": "app-devops-cicd.jar",
                  "version": "1.${{ github.run_number }}",
                  "semanticVersion": "1.${{ github.run_number }}.0",
                  "repositoryName": "${{ github.repository }}"
              }
          ]'
          # Name of the Package that contains list of artifacts
            package-name: 'app-devops-change-velocity-cicd.war'
          # Display Name of Job
            job-name: 'Register Package'
      
  changeApproval:
    name: ServiceNow Change Approval
    needs: registerPackage
    runs-on: ubuntu-latest

    steps:     
      - name: ServiceNow Change Approval
        uses: ServiceNow/servicenow-devops-change@v3.1.0
        id: create
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          #devops-integration-user-name: 'admin'
          #devops-integration-user-password: 'FULLcontact@96'
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'ServiceNow Change Approval'
          change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '100'
          timeout: '3600'
          changeCreationTimeOut: '3600'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: true
          
      - name: Output of Change Creation
        run: echo "change-request-number = ${{ steps.create.outputs.change-request-number }} and change-request-sys-id = ${{ steps.create.outputs.change-request-sys-id }} " >> $GITHUB_OUTPUT
        
  deploy:
    name: Deploy
    needs: changeApproval
    runs-on: ubuntu-latest
    steps:     
      - name: Run Deployment Script
        run: echo "Deployment Finished....."
